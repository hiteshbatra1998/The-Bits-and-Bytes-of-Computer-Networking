* Transport Layer
-------------------
 Allows traffic to be directed to specific network applications;
 
* Application Layer 
---------------------
Allows these applications to communicate in a way they can understand;

* The Transport Layer
-----------------------
-> Has the ability to multiplex and de-multiplex;
  * Multiplexing -> The nodes on the network have the ability to direct traffic towards many different receiving services.
  
  Process 1 -> 
               | M
  Process 2 -> | u p
               | l l x r |   -> IP
  Process 3 -> | t e e   |
               | i
  Process 4 -> |
  
  
  * Demultiplexing -> Taking trafiic aimed at the same node and delivering it to the proper receiving service;
    
            | D
            | e l  
            | m e  |  -> Process 1
      IP -> | u x  |  -> Process 2
            | l    |
            | t    |  -> Process 3
            | i    |  -> Process 4 
            | p
   
 - The transport layer handles multiplexing and demultiplexing through ports.
 - A 16-bit number that's used to direct traffic to specific services running on a networked computer;
 - Server - program running on a computer waiting to be asked for data;
 - Client - program that is requesting this data;
 - Different network services run while listening on specific ports for incoming request.
 - Example : Traditional port for - HTTP or unencrypted web traffic is port 80; While requesting a webpage from a web server running on a computer listening on IP 10.1.1.100 - the traffic would be directed to port 80 on that computer;
 
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 A port is a number used to uniquely identify a transaction over a network by specifying both the host, and the service.
 They are necessary to differentiate between many different IP services, such as web service (HTTP), mail service (SMTP), and file transfer (FTP).
 When clients attempt to connect to your server they need your computer’s IP address, but they also need to indicate which service they want to communicate with, so that the data is sent to the appropriate application.
 The port number serves to uniquely identify that service on a particular host. The default port number for SMTP is 25, so packets of information relating to email are directed here.
 Likewise the default for HTTP is 80, which is used to identify packets for transfer to the web server.
 
 Ports - 
 *20 - File Transfer Protocol (FTP) Data Transfer
 22	- Secure Shell (SSH) Secure Login
 *25	Simple Mail Transfer Protocol (SMTP) E-mail routing
 *53	- Domain Name System (DNS) service
 *67(S), 68(C) - 	Dynamic Host Configuration Protocol (DHCP)
 *80	 -  Hypertext Transfer Protocol (HTTP) used in the World Wide Web
 123	- Network Time Protocol (NTP)
 143	- Internet Message Access Protocol (IMAP) Management of digital mail
 194	- Internet Relay Chat (IRC)
 *443	- HTTP Secure (HTTPS) HTTP over TLS/SSL
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 - Ports are denoted by a colon after the IP address -> 10.1.1.100:80 -> Socket Address / Socket number;
 
 - The same device might also be running an FTP (File Transfer Protocol) server - FTP an older method for transfering files from one computer to another but is still in use;
 - FTP traditionally listens on port 21; - 10.1.1.100:21; 
 
-> In small environments - a single server can host all the applications needed to run a business - intternal website, mail server, file server - share files, print servers - share network printers, etc - possible because of multiplexing and demultiplexing and addition of ports to the addressing scheme;

-----------------------------------------------------------------------------------------------------------------------------------
* Dissection of a TCP segment
-----------------------------
-> An ethernet framer encapsulates a IP datagram, an Ip datagram encapsulates a TCP segment; The ethernet frame's paylad is the entire content of the IP datagram; The Ip datagram's payload section is made up of the TCP segment;

-> TCP segment - madeup of a TCP header and a data section; The data section is where the application layer places its data;
-> A TCP header is split into different fields;
       Bit 0                                Bit 15 Bit 16                             Bit 31
        ----------------------------------------------------------------------------------
                Source port (16)                 |     Destination port (16)
        ----------------------------------------------------------------------------------
                        Sequence number   (32)
        ----------------------------------------------------------------------------------
                          Acknowledgment number (32)
        ----------------------------------------------------------------------------------     20
        Header length(4)|Empty(6)|Control Flags(6)|    Window (16)
        ----------------------------------------------------------------------------------    Bytes
              Checksum (16)                       |     Urgent (16)
        ----------------------------------------------------------------------------------
            Options (0 or 16 if any)              |   Padding
        ----------------------------------------------------------------------------------
                          Data payload (varies)
        ----------------------------------------------------------------------------------    
 
 1. Source port - A high-number port chosen from a special section of ports known as ephemeral ports - required to keep lots of outgoing connections separate - response is received by the web browser;
 2. Destination port - The port of the service the traffic is intended for;
 3. Sequence number - A 32-bit number used to keep track of where in a sequence of TCP segments this one is expected to be; 
      The Ethernet frame has a limit of 1518 bytes and if the intended data to be sent is more than that the it is framnented and sent;
 4. Acknowledgment number - The number of thenext expected segment;
 5. Header length/ Data offset - 4 bit number that communicates how long a TCP header for this segment is;
 6. Empty - 
 7. Control Flags - TCP control flags
 8. TCP Window - specifies the range of sequencesnumbers that might be sent before the acknowledgment is required; 
 9. Checksum - When all the segments are ingested by the recipient the checksum is calculated across the entire segment and compared with the checksum in the header to make sure no data is lost or corrupted;
 10. Urgent - Used in conjunction with one of the TCP control flags to point out particular segments that might be more important than others;
 11. Options -  complicated flow control protocols;
 12. padding - extra zeros to ensure that the data payload section begins at the expected location;
 
-----------------------------------------------------------------------------------------------------------------------------------
* TCP Control Flags and the three-way handshake
-----------------------------------------------
-> TCP as a protocols establishes connections used to send long chains of segments of data.
-> TCP establishes connections through the use of different TCP control flags used in a very specific order.

-> 6 TCP control flags - order they appear in the TCP header
------------------------
1. URG -> Urgent - A value of one here indicates that the segment is considered urgent and that the urgent pointer field has more data about this;
2. ACK -> Acknowledged - A value of one in this field means that the acknowledgment number field should be examined.
    It is used to acknowledge packets which are successful received by the host. The flag is set if the acknowledgement number field contains a valid acknowledgement number.
3. PSH -> push - The transmitting device wants the receiving device to push currently-buffered data to the application on the receiving end as soon as possible.
   (A buffer is a computing technique where a certain amount of data is held somewhere, before being sent elsewhere  -  used to send large chunks of data more efficiently);
4. RST - Reset - One of the sides in a TCP connection has not been able to properly recover from a series of missing or malformed segments;
5. SYN (synchronize) - It's used when first establishing a TCP connection and makes sure the receiving end knows to examine the sequence number field;
   This is used for synchronizing sequence number i.e. to tell the other end which sequence number they should except. First packet from both sender's and receiver's end.
6. FIN (finish) - When this flag is set to one, it means the transmitting computer does not have any more data to send and the connection can be closed.
   This is the last packet sent by sender. It frees the reserved resources and gracefully terminate the connection.

* Example of how a TCP control flags are used and connections are set:
----------------------------------------------------------------------
a. Computer A wants to establish connection with Computer B; Computer A - transmitting omputer, Computer B - Receving Computer;
b. Computer A - sends a TCP segment top Computer B with the SYN flag set - Computer A wants to establish connection with Computer B and look at A's sequence number field;
c. Computer B responds - by sending - a SYN/ACK Flags set - in order to establish the connection;
d. Computer A responds only with the ACK flag set - to send data;

Handshake -> A way for two devices to ensure that they are speaking the same protocol and will be ab;le to understand each other.

A                     B
   -------SYN-------->
   <----SYN/ACK-------
   -------ACK--------->
   
Since bothe A and B are able to exchange data - TCP connection at this state is operating in full DUPLEX;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
3-way handshake:
Step 1 (SYN) : In the first step, client wants to establish a connection with server, so it sends a segment with SYN(Synchronize Sequence Number) 
               which informs server that client is likely to start communication and with what sequence number it starts segments with

Step 2 (SYN + ACK): Server responds to the client request with SYN-ACK signal bits set. Acknowledgement(ACK) signifies the response of segment it received and SYN signifies with what sequence number it is likely to start the segments with

Step 3 (ACK) : In the final part client acknowledges the response of server and they both establish a reliable connection with which they will start the actual data transfer

The steps 1, 2 establish the connection parameter (sequence number) for one direction and it is acknowledged. The steps 2, 3 establish the connection parameter (sequence number) for the other direction and it is acknowledged.
With these, a full-duplex communication is established.

Note – Initial sequence numbers are randomly selected while establishing connections between client and server.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

* Close the Connection - Four Way Handshake
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
4 way handshake:
Step 1 (FIN From Client) – Suppose that the client application decides it wants to close the connection. (Note that the server could also choose to close the connection). 
                           This causes the client send a TCP segment with the FIN bit set to 1 to server and to enter the FIN_WAIT_1 state. While in the FIN_WAIT_1 state, the client waits for a TCP segment from the server with an acknowledgment (ACK).
Step 2 (ACK From Server) – When Server received FIN bit segment from Sender (Client), Server Immediately send acknowledgement (ACK) segment to the Sender (Client).

Step 3 (Client waiting) – While in the FIN_WAIT_1 state, the client waits for a TCP segment from the server with an acknowledgment. When it receives this segment, the client enters the FIN_WAIT_2 state. 
                          While in the FIN_WAIT_2 state, the client waits for another segment from the server with the FIN bit set to 1.
                          
Step 4 (FIN from Server) – Server sends FIN bit segment to the Sender(Client) after some time when Server send the ACK segment (because of some closing process in the Server).

Step 5 (ACK from Client) – When Client receive FIN bit segment from the Server, the client acknowledges the server’s segment and enters the TIME_WAIT state. 
                           The TIME_WAIT state lets the client resend the final acknowledgment in case the ACK is lost.The time spent by client in the TIME_WAIT state is depend on their implementation, but their typical values are 30 seconds, 1 minute, and 2 minutes. 
                           After the wait, the connection formally closes and all resources on the client side (including port numbers and buffer data) are released.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

A                                    B
    <---------FIN-------------------
    ----------ACK------------------->
    ------------FIN----------------->
    <-----------ACK------------------

----------------------------------------------------------------------------------------------------------------------------------------
* TCP Socket States
---------------------
* Socket - The intantiation of an end-point in a potential TCP connection;
* Instantiation - The actual implementation of something defined elsewhere.
-> The traffic can be sent to any port, but the response will be available only if the program has opened a socket on that port.
-> TCP sockets can exist in a lot of states.
  a. LISTEN - A TCP socket is ready and listening for incoming connections - only on the server side;
  b. SYN_SENT - A synchronication request has been sent but the connection hasn't been established yet; - only on the client side;
  c. SYN-RECEIVED - A socket previously in a LISTEN state has received a synchronization request and sent a SYN/ACK back; - only on the server side;
  d. ESTABLISHED - The TCP connection is in working order and both sides are free to send to each other data; - state is available in both the client and server sides of the connection;
  e. FIN_WAIT - A FIN has been sent, but the corresponding ACK from the other end hasn't been received yet;
  f. CLOSE_WAIT - The connection has been closed at the TCP layer, but that the application that opened the socket hasn't released its hold on the socket yet;
  g. CLOSED - The connection has been fully terminated and that no further communication is possible;
  
There are more socket states, TCP protocols is universal but the socket states names may vary from operating systems but their functionality is the same; 

----------------------------------------------------------------------------------------------------------------------------------------
* Connection-oriented and Connectionless Protocols
--------------------------------------------------
-> Connection-oriented Protocols - Establishes a connection, and uses this to ensure that all data has been properly transmitted. (TCP);
  Every segment of data sent is acknowledged;
- At the Ethernet and IP layer if the Checksum does not computer all the data is discarded, and it is up to TCP to determine when to resend the data since TCP 
  expects an ACK for every bit of data it sends;
- Sequence numbers enable data to be put back in the same order;
-> There is a lot of overheade in regrad to the connection-oriented protocol
  - Need to establish a connection;
  - Need to send a stream of constant streams of acknowledgments;
  - Tear the connection down at the end;
 
-> Connectionless Protocol - User Datagram Protocol (UDP) - Here you set the destination port and send the packet - useful for messages that are not supper 
   important - example - streaming video -  bandwidth is used for actual data rather than establishing connection overhead;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
UDP  - Though Transmission Control Protocol (TCP) is the dominant transport layer protocol used with most of Internet services; provides assured delivery, 
       reliability and much more but all these services cost us with additional overhead and latency. 
       Here, UDP comes into picture. For the realtime services like computer gaming, voice or video communication, live conferences; we need UDP. Since high 
       performance is needed, UDP permits packets to be dropped instead of processing delayed packets. 
* There is no error checking in UDP, so it also save bandwidth. User Datagram Protocol (UDP) is more efficient in terms of both latency and bandwidth. 
* Unlike TCP, Checksum calculation is not mandatory in UDP. No Error control or flow control is provided by UDP.
* UDP is used by DNS, DHCP, TFTP, SNMP, RIP, and VoIP.
* TCP is used by HTTP, HTTPs, FTP, SMTP and Telnet.
**************************************************
- TCP is a connection-oriented protocol. Connection-orientation means that the communicating devices should establish a connection before transmitting data and 
  should close the connection after transmitting the data.	
- UDP is the Datagram oriented protocol. This is because there is no overhead for opening a connection, maintaining a connection, and terminating a connection.  
  UDP is efficient for broadcast and multicast type of network transmission.

- TCP is reliable as it guarantees delivery of data to the destination router.	
- The delivery of data to the destination cannot be guaranteed in UDP.

- TCP provides extensive error checking mechanisms. It is because it provides flow control and acknowledgment of data.	
- UDP has only the basic error checking mechanism using checksums.

- Sequencing of data is a feature of Transmission Control Protocol (TCP). this means that packets arrive in-order at the receiver.	
- There is no sequencing of data in UDP. If ordering is required, it has to be managed by the application layer.

- TCP is comparatively slower than UDP.	
- UDP is faster, simpler and more efficient than TCP.

- Retransmission of lost packets is possible in TCP, but not in UDP.	There is no retransmission of lost packets in User Datagram Protocol (UDP).

- TCP has a (20-80) bytes variable length header.	UDP has a 8 bytes fixed length header.

- TCP is heavy-weight.	UDP is lightweight.

- TCP doesn’t supports Broadcasting.	UDP supports Broadcasting.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------

*********************************
  System ports V/s Ephemeral ports
  
  * System ports (also known as “well-known ports”) are ports on which applications listen for traffic. For example, by default, http servers listen on tcp port 
    80, smtp servers listen on tcp port 25, dns servers listen on udp port 53, etc. 
    Almost all well-known ports are numbered below 1023 (there are exceptions).

  * Ephemeral ports are high numbered ports (>1024) used by client applications as the “source port” when connecting/sending data to a system port, and are used 
    by the server application for the return data.

- A network server process must use a “well-known” port number so that potential clients can locate it. The client also needs a port number to create a TCP/IP 
  connection, but this port number need not be well known. 
- Clients are assigned port numbers by the operating system, as part of the sequence of system calls that create a network connection. 
These port numbers are called “ephemeral” because they are valid only for the life of the connection and have no special significance.

------------------------------------
- Transportation layer protocols use the concept of ports and multiplexing and demultiplexing to deliever data to individual service listening on network nodes. 
  These ports are represented by a single 16-bit number (0 - 65535);

The IANA has split the range into independent sections :
---------------------------------------------------------
- Port 0 - It is not used for network traffic, but for communication between different programs on the same computer;
- Ports 1 - 1023 - System ports / ports - used for network services;
     HTTP  - port 80; 
     FTP - port 21; 
     Most OS Administrative access is required to start a program that listens on a system port;
- Ports 1024 - 49151 - registered ports - used for uncommon network services;
    port 3306 - database listen on;
    On most operating systems, any user of any access level can start a program listening on a registered port.
- Ports 49152 - 65535 -  private or ephemeral ports
     Ephemeral ports can’t be registered with the IANA and are generally used for establishing outbound connections.
     All TCP traffic uses a destination port and a source port.
     When a client wants to communicate with a server, the client will be assigned an ephemeral port to be used for just that one connection, 
     while the server listens on a static system or registered port.
----------------------------------------------------------------------------------------------------------------------------------------

* Firewalls
----------------------------------------------------------------------------------------------------------------------------------
A firewall is a network security device, either hardware or software-based, which monitors all incoming and outgoing traffic and based on a defined set of 
security rules it accepts, rejects or drops that specific traffic. Before Firewalls, network security was performed by Access Control Lists (ACLs) residing on 
routers.

Accept : allow the traffic
Reject : block the traffic but reply with an “unreachable error”
Drop : block the traffic with no reply

- A firewall establishes a barrier between secured internal networks and outside untrusted network, such as the Internet.
- Firewall match the network traffic against the rule set defined in its table. Once the rule is matched, associate action is applied to the network traffic.

- Firewalls are generally of two types: Host-based and Network-based.
     Host- based Firewalls : Host-based firewall is installed on each network node which controls each incoming and outgoing packet. 
                             It is a software application or suite of applications, comes as a part of the operating system.
                             Host-based firewalls are needed because network firewalls cannot provide protection inside a trusted network. 
                             Host firewall protects each host from attacks and unauthorized access.
                             
     Network-based Firewalls : Network firewall function on network level. In other words, these firewalls filter all incoming and outgoing traffic across the network. 
                               It protects the internal network by filtering the traffic using rules defined on the firewall. 
                               A Network firewall might have two or more network interface cards (NICs).
                               
- Firewalls can be categorized based on its generation.

     First Generation - Packet Filtering Firewall :  Packet filtering firewall is used to control network access by monitoring outgoing and incoming packet and 
                        allowing them to pass or stop based on source and destination IP address, protocols and ports. 
                        Packet firewalls treat each packet in isolation. They have no ability to tell whether a packet is part of an existing stream of traffic. 
                        Only It can allow or deny the packets based on unique packet headers.

     Second Generation- Stateful Inspection Firewall : Stateful firewalls (performs Stateful Packet Inspection) are able to determine the connection state of 
                        packet, unlike Packet filtering firewall, which makes it more efficient.

     Third Generation- Application Layer Firewall : Application layer firewall can inspect and filter the packets on any OSI layer, up to the application layer. 
                       It has the ability to block specific content, also recognize when certain application and protocols (like HTTP, FTP) are being misused.

     Next Generation Firewalls (NGFW) : Next Generation Firewalls are being deployed these days to stop modern security breaches like advance malware attacks 
                                        and application-layer attacks.            
    
- Firewalls, both hardware and software, protect computers from hackers and other online threats by blocking dangerous pieces of data from reaching the system. 
  While hardware firewalls offer network-wide protection from external threats, software firewalls installed on individual computers can more closely inspect 
  data, and can block specific programs from even sending data to the Internet. 
  On networks with high security concerns, combining both kinds of firewalls provides a more complete safety net.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
- A device that blocks traffic that meets certain criteria;
- Provide secure network and can operate at lots of different layers of a network;
   - Inspection of application layer traffic;
   - Block ranges of IP addresses;
 - They are most commonly used at the transportation layer;
    - Firewalls will have configuration to enable data to flow through certain ports while be blocked on other ports;
    
-> A firewall can be configured at the perimeter of the network enabling clients/IPs to view the network and preventing any other information or access;
-> Firewalls can be independent networks but could also be programs that could be run anywhere;
-> Many cases the functionality of the router and firewalls is performed by the same device;
-> Firewalss can run on individual hosts instead of being a network device;
-> All major modern os habe firewall functionality built-in - therefore blocking services to ports can be performed at the host level as well;
